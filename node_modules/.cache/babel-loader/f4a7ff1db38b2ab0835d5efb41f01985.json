{"ast":null,"code":"import _slicedToArray from \"/home/sergio/Documentos/topi/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/sergio/Documentos/topi/web/src/components/RepoList/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DupObjArrRemover from '../../utils/DupObjArrRemover';\nimport './style.css';\nimport RepoItem from '../RepoItem';\n\nfunction RepoList({\n  selectedLanguage\n}) {\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        error = _useState4[0],\n        setError = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        repositories = _useState6[0],\n        setRepositories = _useState6[1];\n\n  useEffect(() => {\n    let language = selectedLanguage.replace('JavaScript', 'JS');\n    axios({\n      method: 'GET',\n      url: `https://api.github.com/search/repositories?q=language:${language}&sort=stars&page=1`\n    }).then(response => {\n      response.data.total_count === 0 ? setRepositories([]) : setRepositories(prevRepos => {\n        return [...new Set([...prevRepos, response.data.items.map(item => item)])];\n      });\n      setLoading(false);\n      setError(false);\n    }).catch(er => {\n      setError(true);\n      setLoading(false);\n    });\n  }, [selectedLanguage]);\n\n  if (loading) {\n    return React.createElement(\"div\", {\n      className: \"overlay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"loadingbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(CircularProgress, {\n      disableShrink: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }))));\n  } else {\n    if (Array.isArray(repositories) && repositories.length) {\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, repositories.map(repo => React.createElement(RepoItem, {\n        key: repo.name,\n        repo: repo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      })));\n    } else {\n      if (error) {\n        return React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, \"Erro ao carregar, por favor, tente novamente.\");\n      } else return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"N\\xE3o existem reposit\\xF3rios na linguagem selecionada.\");\n    }\n  }\n}\n\nexport default RepoList;","map":{"version":3,"sources":["/home/sergio/Documentos/topi/web/src/components/RepoList/index.js"],"names":["React","useState","useEffect","axios","CircularProgress","DupObjArrRemover","RepoItem","RepoList","selectedLanguage","loading","setLoading","error","setError","repositories","setRepositories","language","replace","method","url","then","response","data","total_count","prevRepos","Set","items","map","item","catch","er","Array","isArray","length","repo","name"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,OAAO,aAAP;AAEA,OAAOC,QAAP,MAAqB,aAArB;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAwC;AAAA,oBACRP,QAAQ,CAAC,IAAD,CADA;AAAA;AAAA,QAC/BQ,OAD+B;AAAA,QACtBC,UADsB;;AAAA,qBAEZT,QAAQ,CAAC,KAAD,CAFI;AAAA;AAAA,QAE/BU,KAF+B;AAAA,QAExBC,QAFwB;;AAAA,qBAGEX,QAAQ,CAAC,EAAD,CAHV;AAAA;AAAA,QAG/BY,YAH+B;AAAA,QAGjBC,eAHiB;;AAKtCZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,QAAQ,GAAGP,gBAAgB,CAACQ,OAAjB,CAAyB,YAAzB,EAAuC,IAAvC,CAAf;AAEAb,IAAAA,KAAK,CAAC;AACJc,MAAAA,MAAM,EAAE,KADJ;AAEJC,MAAAA,GAAG,EAAG,yDAAwDH,QAAS;AAFnE,KAAD,CAAL,CAIGI,IAJH,CAIQC,QAAQ,IAAI;AAChBA,MAAAA,QAAQ,CAACC,IAAT,CAAcC,WAAd,KAA8B,CAA9B,GACIR,eAAe,CAAC,EAAD,CADnB,GAEIA,eAAe,CAACS,SAAS,IAAI;AAC3B,eAAO,CACL,GAAG,IAAIC,GAAJ,CAAQ,CACT,GAAGD,SADM,EAETH,QAAQ,CAACC,IAAT,CAAcI,KAAd,CAAoBC,GAApB,CAAwBC,IAAI,IAAIA,IAAhC,CAFS,CAAR,CADE,CAAP;AAMD,OAPc,CAFnB;AAWAjB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,KAlBH,EAmBGgB,KAnBH,CAmBSC,EAAE,IAAI;AACXjB,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAtBH;AAuBD,GA1BQ,EA0BN,CAACF,gBAAD,CA1BM,CAAT;;AA4BA,MAAIC,OAAJ,EAAa;AACX,WACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,gBAAD;AAAkB,MAAA,aAAa,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CADF;AASD,GAVD,MAUO;AACL,QAAIqB,KAAK,CAACC,OAAN,CAAclB,YAAd,KAA+BA,YAAY,CAACmB,MAAhD,EAAwD;AACtD,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGnB,YAAY,CAACa,GAAb,CAAiBO,IAAI,IACpB,oBAAC,QAAD;AAAU,QAAA,GAAG,EAAEA,IAAI,CAACC,IAApB;AAA0B,QAAA,IAAI,EAAED,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,CADH,CADF;AAOD,KARD,MAQO;AACL,UAAItB,KAAJ,EAAW;AACT,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DAAP;AACD,OAFD,MAEO,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEAAP;AACR;AACF;AACF;;AAED,eAAeJ,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DupObjArrRemover from '../../utils/DupObjArrRemover';\nimport './style.css';\n\nimport RepoItem from '../RepoItem';\n\nfunction RepoList({ selectedLanguage }) {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [repositories, setRepositories] = useState([]);\n\n  useEffect(() => {\n    let language = selectedLanguage.replace('JavaScript', 'JS');\n\n    axios({\n      method: 'GET',\n      url: `https://api.github.com/search/repositories?q=language:${language}&sort=stars&page=1`\n    })\n      .then(response => {\n        response.data.total_count === 0\n          ? setRepositories([])\n          : setRepositories(prevRepos => {\n              return [\n                ...new Set([\n                  ...prevRepos,\n                  response.data.items.map(item => item)\n                ])\n              ];\n            });\n\n        setLoading(false);\n        setError(false);\n      })\n      .catch(er => {\n        setError(true);\n        setLoading(false);\n      });\n  }, [selectedLanguage]);\n\n  if (loading) {\n    return (\n      <div className='overlay'>\n        <div className='loading'>\n          <div className='loadingbar'>\n            <CircularProgress disableShrink />\n          </div>\n        </div>\n      </div>\n    );\n  } else {\n    if (Array.isArray(repositories) && repositories.length) {\n      return (\n        <ul>\n          {repositories.map(repo => (\n            <RepoItem key={repo.name} repo={repo} />\n          ))}\n        </ul>\n      );\n    } else {\n      if (error) {\n        return <h1>Erro ao carregar, por favor, tente novamente.</h1>;\n      } else return <h1>Não existem repositórios na linguagem selecionada.</h1>;\n    }\n  }\n}\n\nexport default RepoList;\n"]},"metadata":{},"sourceType":"module"}